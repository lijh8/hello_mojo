mojo lang


---


Install

Install pixi first
$ curl -fsSL https://pixi.sh/install.sh | sh
The 'pixi' binary is installed into '/Users/ljh/.pixi/bin'
Updating '/Users/ljh/.zshrc'
Please restart or source your shell.
$

Then restart your terminal for the changes to take effect.

Navigate to the directory in which you want to create the project and execute:

$ mkdir ~/hello && cd ~/hello

$ pixi init example-project \
  -c https://conda.modular.com/max-nightly/ -c conda-forge \
  && cd example-project
$

Install the Modular Platform from the modular package (which includes Mojo):
$ pixi add modular

checking the version of Mojo:
$ pixi run mojo --version

Start the virtual environment:
$ pixi shell

$ vi hello.mojo

$ mojo hello.mojo

$ mojo build hello.mojo

$ ./hello

To deactivate your virtual environment:
$ exit


Uninstall

$ pixi remove modular


---


VSCode

Extension: mojo by Modular,

When mojo program needs stdin input, use internal terminal instead of debug console:
launch.json:
    "runInTerminal": true,

This is similar to golang extension:
    "console": "integratedTerminal",

When install mojo extension in vscode, it will also install or config MAX SDK from Modular.


---


// like c++ class with virtual function
https://docs.modular.com/mojo/manual/traits/#using-traits ,
Traits solve this problem by letting you define a shared set of behaviors that types can implement.
Then you can write a function that depends on the trait, rather than individual types.


// like c++ template
https://docs.modular.com/mojo/manual/traits/#generic-structs-with-traits ,
You can also use traits when defining a generic container.
A generic container is a container (for example, an array or hashmap) that can hold different data types.


---


https://docs.modular.com/mojo/manual/lifecycle/life#constructors-and-implicit-conversion ,
Implicit conversion can happen when one of the following occurs:
You assign a value of one type to a variable with a different type.
You pass a value of one type to a function that requires a different type.
You return a value of one type from a function that specifies a different return type.


---


// assignment:
//   value semantics, copy, modify the copy will not change the original value;
//
// function argument pass:
//   value semantics, copy, through immutable reference.
//   inside the function, the argument can not be changed.
//   copy the argument explicitly by manual, then make changes on the new copy.
//   the original argument from the calling side is not changed;

https://docs.modular.com/mojo/manual/values/value-semantics ,

Mojo is designed with argument behaviors that default to value semantics,

In the most basic situation, sharing a value-semantic type means that you create a copy of the value.
This is also known as "pass by value."

We assigned the value of x to y, which creates the value for y by making a copy of x.
When we increment y, the value of x doesn't change. Each variable has exclusive ownership of a value.

    var x = 1
    var y = x
    y += 1

Numeric values in Mojo are value semantic because they're trivial types, which are cheap to copy.

Value semantics also apply to function arguments in Mojo by default.

in the following function, the y argument is immutable by default,
so if the function wants to modify the value in the local scope, it needs to make a local copy.

fn add_two(y: Int):
    # y += 2  # This would cause a compiler error because `y` is immutable
    # We can instead make an explicit copy:
    var z = y
    z += 2
    print("z:", z)

def main():
    var x = 1
    add_two(x)
    print("x:", x)

the default behavior for function arguments is fully value semantic:
arguments are immutable references,
and any living variable from the callee is not affected by the function.


---


https://docs.modular.com/mojo/manual/values/ownership ,

In Mojo, we want to provide full value semantics by default,
By default, all arguments are read,
The read convention is the default for all arguments.

Mojo is more efficient when passing small values,
and Rust defaults to moving values instead of passing them around by borrow.
These policy and syntax decisions allow Mojo to provide an easier-to-use programming model.


---


struct T:
    var name: String

    fn __init__(out self, name: String):
        self.name = name
        print("init", self.name)

    fn __copyinit__(out self, existing: Self):
        self.name = existing.name
        print("copyinit", self.name)

    fn __moveinit__(out self, owned existing: Self):
        self.name = existing.name
        print("moveinit", self.name)

    fn __del__(owned self):
        print("del", self.name)


fn f1(t: T):
    print("f1", t.name)


fn f2(owned t: T):
    print("f2", t.name)


fn main():
    a = T("a")
    b = T("b")
    # b = a  # create new instance, initialized from another instance, copyinit;
    # a = b  # assignment, copyinit;

    # b = a^  # create new instance with move sigil ^ , moveinit;
    b = a^  # assignment with move sigil ^ , moveinit;

    # print(a.name)
    print(b.name)


// __init__:
//      create a new instance, not initialized from another existing instance;
//
// __copyinit__,
//      create a new instance, initialized from another existing instance;
//      assignment, between existing instances;
//
// __moveinit__:
//      initialization or assignment with move sigil ^ character;

// mojo use copyinit for both creating an instance with initialization and assignment.
// it does not need separate assignment operator methods like c++.


---


https://docs.modular.com/mojo/manual/structs ,

So here it is with a constructor to initialize the two fields,
The __init__() method is one of many special methods
(also known as "dunder methods" because they have double underscores) with pre-determined names.

Once you have a constructor, you can create an instance of MyPair and set the fields.


https://docs.modular.com/mojo/manual/lifecycle/life#copy-constructor ,
When Mojo encounters an assignment statement that doesn't use the transfer sigil (^),
it tries to make a copy of the right-side value by calling upon that type's copy constructor,

Mojo also calls upon the copy constructor when a value is passed to a function that takes the argument as owned
and when the lifetime of the given value does not end at that point.

If the lifetime of the value does end there (usually indicated with the transfer sigil ^),
then Mojo instead invokes the move constructor.


---


fn main():
    a = T("a")
    b = a  # create new instance, initialized with another instance, copyinit
    b.name = "bbb"
    print(a.name, b.name)  # a, bbb


---


fn main():
    a = T("a")
    b = T("b")
    b = a  # assignment, copyinit;
    b.name = "bbb"
    print(a.name, b.name)  # a, bbb


---


fn main():
    a = T("a")
    # b = T("b")
    b = a^  # moveinit;
    b.name = "bbb"
    # print(a.name, b.name)  # a, bbb
    print(b.name)  # a, bbb


---


fn main():
    a = T("a")
    # f1(a)
    f1(a^)
    print(a.name)  # f1 will not move, object a still available


---


fn main():
    a = T("a")
    b = T("b")
    f2(a)  # copyinit
    print(a.name)  # object a is still available here

    f2(a^)  # move
    print(a.name)  # moved, object a is unavailable anymore


---


https://docs.modular.com/mojo/manual/lifecycle/life#move-constructor ,
the only catch is that you must use the ^ transfer sigil to end the lifetime of a move-only type
when assigning it to a new variable or when passing it as an owned argument.


---


https://docs.modular.com/mojo/manual/lifecycle/life#value-decorator ,
even if it's not used with self.name = name^, the Mojo compiler will notice
that name is last used here and convert this assignment into a move, instead of a copy+delete.


---


// file handle, network and database connection, are non-memory (eg. variables) resources.
// it is like using a custom deleter with c++ smart pointer.
https://docs.modular.com/mojo/manual/errors#use-a-context-manager ,
A context manager is an object that manages resources such as files, network connections,
and database connections.


---


https://docs.modular.com/mojo/manual/packages#mojo-modules ,
import MyPair into a file named main.mojo that's in the same directory as mymodule.mojo:
  from mymodule import MyPair

it only works when mymodule.mojo is in the same directory as main.mojo.
Currently, you can't import .mojo files as modules if they reside in other directories.
That is, unless you treat the directory as a Mojo package, as described in the next section.


---


// sort,
https://docs.modular.com/mojo/stdlib/builtin/sort/sort ,

// search,
https://docs.modular.com/mojo/stdlib/collections/list/List ,
    var my_list = [1, 2, 3]
    print(my_list.index(2)) # prints `1`

// find,
https://docs.modular.com/mojo/stdlib/collections/dict/Dict#find ,

// find string,
https://docs.modular.com/mojo/stdlib/collections/string/string/String#find ,

// substr, zero copy slicing,
https://docs.modular.com/mojo/stdlib/collections/string/string_slice/ ,
https://docs.modular.com/mojo/stdlib/collections/string/string_slice/StringSlice ,
https://docs.modular.com/mojo/stdlib/builtin/range/range ,

fn main() raises:
    # slice with half-open range, [start: end)
    s1 = "Hello, 世界"  # string literal does not support slicing.
    s2 = "Hello, 世界".as_string_slice()
    s3 = StringSlice("Hello, 世界")
    s4 = String("Hello, 世界")
    print(s2[7:13])
    print(s3[7:13])
    print(s4[7:13])

    a = "abc"
    b = 123
    format_str = StaticString("|{}, {}|")
    print(format_str.format(a, b))


---


# turn unicode string into a list of string
# so every element is a unicode character and can be correctly indexed

def main():
    s1 = "Hello, 世界"

    print(len(s1)) # 13
    print(s1[7])   # error
    print(s1[8])   # error

    s2 = List[String]()

    # 1. with list comprehension
    s2 = [String(c) for c in s1]

    # 2. without list comprehension
    # for c in s1:
    #     s2.append(String(c))

    print(len(s2)) # 9
    print(s2[7])   # ok
    print(s2[8])   # ok


---
